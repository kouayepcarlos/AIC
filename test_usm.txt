#include "usm_entete.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <sys/mman.h>
#include <time.h> // Pour mesurer le temps

int main(int argc, char *argv[]) {
    clock_t start, end;
    double cpu_time_used;

    const char* content = "salut carlos";

    // Mesure du temps pour la connexion au serveur
    start = clock();
    struct usm_return_connect *connecter = usm_connect(SOCKET, 8095);
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC * 1000; // Temps en ms
    printf("Temps pour la connexion à USM : %.2f ms\n", cpu_time_used);

    if (connecter == NULL) {
        fprintf(stderr, "Erreur : Connexion au serveur USM échouée.\n");
        return -1;
    }

    size_t size = 4096; // Taille d’une page mémoire
    int num_allocations = 10; // Nombre de pages à allouer

    char request = (char)malloc(1024);
    bzero(request, 1024);

    // Mesure du temps pour l'allocation mémoire
    start = clock();
    void *addr = mmap(NULL, size * num_allocations, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC * 1000; // Temps en ms
    printf("Temps pour l'allocation mémoire : %.2f ms\n", cpu_time_used);

    if (addr == MAP_FAILED) {
        perror("Erreur mmap");
        return -1;
    }

    // Mesure du temps pour l'envoi de la requête
    start = clock();
    sprintf(request, "%c;%d;%p;%s", 'A', num_allocations, (void *)addr, "tmp");
    char *data = usm_send(request, strlen(request), *connecter);
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC * 1000; // Temps en ms
    printf("Temps pour l'envoi de la requête : %.2f ms\n", cpu_time_used);

    if (data == NULL) {
        perror("Erreur usm_send");
        return -1;
    }

    printf("Réponse USM : %s\n", data);

    // Mesure du temps pour la réception de la réponse
    start = clock();
    // Simuler la réception (vous pouvez ajuster selon votre logique de réception)
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC * 1000; // Temps en ms
    printf("Temps pour la réponse de USM : %.2f ms\n", cpu_time_used);

    // Écriture de données dans la mémoire allouée
    for (int i = 0; i < num_allocations; i++) {
        sprintf(addr, "Page %d - %p", i, addr);
        printf("Écriture : %p\n", addr);
        addr += 4096;
    }

    // Libération de la mémoire
    for (int i = 0; i < num_allocations; i++) {
        if (munmap(addr, size) == -1) {
            perror("Erreur munmap");
            return -1;
        }
    }

    // Fermeture de la connexion
    free(request);
    free(data);
    usm_close(connecter);

    return 0;
}
